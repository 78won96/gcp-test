label = "Pod-temp-ljw"

environment {
    PRISMA_API_URL = "https://api.jp.prismacloud.io"
}

podTemplate(label: label, containers: [

    containerTemplate(name: "checkov", image: "bridgecrew/checkov:latest", command: "cat", ttyEnabled: true, alwaysPullImage: true)

], volumes: [
    hostPathVolume(mountPath: "/var/run/docker.sock", hostPath: "/var/run/docker.sock"),
]) {

    node(label) {
       
        stage('gitclone') {
            container("checkov") {
               git branch: 'main', url: 'https://github.com/78won96/GCP-Project-ljw.git' 
               stash includes: '**/*', name: 'source' 
            }
        }
        }
        stage('Checkov') {
            withCredentials([string(credentialsId: 'PC_USER', variable: 'pc_user'), string(credentialsId: 'PC_PASSWORD', variable: 'pc_password')]) {
            container("checkov") {
               
                    unstash 'source'
                    // try {
                        // PRISMA_API_URL 환경 변수를 사용하여 명령 실행
                        sh """

                        checkov -d . --use-enforcement-rules -o cli -o junitxml --output-file-path console,results.xml --bc-api-key ${pc_user}::${pc_password} 
                        --prisma-api-url ${PRISMA_API_URL} 
                        --repo-id 78won96/GCP-Project-ljw --branch main

                        """
                        sh 'ls -l results.xml' // results.xml이 생성되었는지 확인
                        junit skipPublishingChecks: true, testResults: 'results.xml'
                    //} catch (err) {
                       // sh 'ls -l results.xml' // 에러가 발생했을 때도 확인
                       // junit skipPublishingChecks: true, testResults: 'results.xml'
                      //  throw err
                    }
                }
            }
        }
    
