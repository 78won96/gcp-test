label = "Pod-temp-ljw"

podTemplate(label: label, containers: [

    containerTemplate(name: "gcloud", image: "google/cloud-sdk:alpine", command: "cat", ttyEnabled: true, alwaysPullImage: true, resourceRequestCpu: '10m'),
    
    containerTemplate(name: "ubuntu", image: "ubuntu", command: "cat", ttyEnabled: true, alwaysPullImage: true, resourceRequestCpu: '10m'),

    // Define a Checkov container
    containerTemplate(name: "checkov", image: "bridgecrew/checkov:latest", command: "cat", ttyEnabled: true, alwaysPullImage: true)

], volumes: [
    hostPathVolume(mountPath: "/var/run/docker.sock", hostPath: "/var/run/docker.sock"),

]
) 
{
    // environment {
    //   PRISMA_API_URL="https://api.jp.prismacloud.io"
    }

    node(label){
        stage('Checkout') {
            container("checkov") {
                git branch: 'main', url: 'https://github.com/78won96/GCP-Project-ljw.git'
                stash includes: '**/*', name: 'source'
            }
        }
        stage('Checkov') {
            container("checkov") {
                withCredentials([string(credentialsId: 'PC_USER', variable: 'pc_user'), string(credentialsId: 'PC_PASSWORD', variable: 'pc_password')]) {
                    container('checkov') { // Run Checkov commands within the Checkov container
                        unstash 'source'
                        try {
                            sh 'checkov -d . --use-enforcement-rules -o cli -o junitxml --output-file-path console,results.xml --bc-api-key ${pc_user}::${pc_password} --repo-id 78won96/GCP-Project-ljw --branch main'
                            junit skipPublishingChecks: true, testResults: 'results.xml'
                        } catch (err) {
                            junit skipPublishingChecks: true, testResults: 'results.xml'
                            throw err
                        }
                    }
                }
            }
        }
    }

